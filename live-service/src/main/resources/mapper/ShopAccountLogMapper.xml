<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xq.live.dao.ShopAccountLogMapper" >
  <resultMap id="BaseResultMap" type="com.xq.live.model.ShopAccountLog" >
    <id column="log_id" property="logId" jdbcType="BIGINT" />
    <result column="order_id" property="orderId" jdbcType="BIGINT" />
    <result column="pay_type" property="payType" jdbcType="INTEGER" />
    <result column="cash_amount" property="cashAmount" jdbcType="DECIMAL" />
    <result column="cash_time" property="cashTime" jdbcType="TIMESTAMP" />
    <result column="refund_amount" property="refundAmount" jdbcType="DECIMAL" />
    <result column="refund_time" property="refundTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    log_id, order_id, pay_type, cash_amount, cash_time, refund_amount, refund_time, create_time
  </sql>
  <select id="serachHisDate" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from shop_account_log
    order by create_time desc limit 1
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from shop_account_log
    where log_id = #{logId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.xq.live.model.ShopAccountLog" >
    insert into shop_account_log (log_id, order_id, pay_type, 
      cash_amount, cash_time, refund_amount, 
      refund_time, create_time)
    values (#{logId,jdbcType=BIGINT}, #{orderId,jdbcType=BIGINT}, #{payType,jdbcType=INTEGER}, 
      #{cashAmount,jdbcType=DECIMAL}, #{cashTime,jdbcType=TIMESTAMP}, #{refundAmount,jdbcType=DECIMAL}, 
      #{refundTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.xq.live.model.ShopAccountLog" >
    insert into shop_account_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="logId != null" >
        log_id,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
      <if test="cashAmount != null" >
        cash_amount,
      </if>
      <if test="cashTime != null" >
        cash_time,
      </if>
      <if test="refundAmount != null" >
        refund_amount,
      </if>
      <if test="refundTime != null" >
        refund_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="logId != null" >
        #{logId,jdbcType=BIGINT},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=INTEGER},
      </if>
      <if test="cashAmount != null" >
        #{cashAmount,jdbcType=DECIMAL},
      </if>
      <if test="cashTime != null" >
        #{cashTime,jdbcType=TIMESTAMP},
      </if>
      <if test="refundAmount != null" >
        #{refundAmount,jdbcType=DECIMAL},
      </if>
      <if test="refundTime != null" >
        #{refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xq.live.model.ShopAccountLog" >
    update shop_account_log
    <set >
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=INTEGER},
      </if>
      <if test="cashAmount != null" >
        cash_amount = #{cashAmount,jdbcType=DECIMAL},
      </if>
      <if test="cashTime != null" >
        cash_time = #{cashTime,jdbcType=TIMESTAMP},
      </if>
      <if test="refundAmount != null" >
        refund_amount = #{refundAmount,jdbcType=DECIMAL},
      </if>
      <if test="refundTime != null" >
        refund_time = #{refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where log_id = #{logId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xq.live.model.ShopAccountLog" >
    update shop_account_log
    set order_id = #{orderId,jdbcType=BIGINT},
      pay_type = #{payType,jdbcType=INTEGER},
      cash_amount = #{cashAmount,jdbcType=DECIMAL},
      cash_time = #{cashTime,jdbcType=TIMESTAMP},
      refund_amount = #{refundAmount,jdbcType=DECIMAL},
      refund_time = #{refundTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where log_id = #{logId,jdbcType=BIGINT}
  </update>
  <!--商户微信收入数据-->
  <insert id="wxPayByTime" parameterType="java.lang.String">
      insert into shop_account_log (order_id,pay_type,cash_amount,cash_time,refund_amount,refund_time,create_time,user_type)
      SELECT
        order_write_off.order_id,1,order_write_off.real_shop_unit_price,order_write_off.create_time,NULL,NULL,now(),2
        FROM
        order_info
        INNER JOIN order_write_off ON order_write_off.order_id = order_info.id AND (order_info.STATUS = 3  and  order_info.pay_type = 2 and order_info.is_deleted=0)
        WHERE	order_write_off.create_time
				BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR} and order_write_off.shop_id > 0
				AND  NOT EXISTS(select *from shop_account_log where  shop_account_log.order_id=order_info.id)
  </insert>
  <!--用户微信收入数据-->
  <insert id="wxUserPayByTime" parameterType="java.lang.String">
      insert into shop_account_log (order_id,pay_type,cash_amount,cash_time,refund_amount,refund_time,create_time,user_type)
      SELECT
        order_write_off.order_id,1,order_write_off.real_shop_unit_price,order_write_off.create_time,NULL,NULL,now(),1
        FROM
        order_info
        INNER JOIN order_write_off ON order_write_off.order_id = order_info.id AND (order_info.STATUS = 3  and  order_info.pay_type = 2 and order_info.is_deleted=0)
        WHERE	order_write_off.create_time
				BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR} and order_write_off.shop_id = 0
				AND  NOT EXISTS(select *from shop_account_log where  shop_account_log.order_id=order_info.id)
  </insert>
  <!--商家微信退款记录-->
  <insert id="wxRefundByTime" parameterType="java.lang.String">
      insert into shop_account_log (order_id,pay_type,cash_amount,cash_time,refund_amount,refund_time,create_time,user_type)
      SELECT
        order_info.id,2,null,null,order_info.real_amount,order_info.update_time,now(),2
        FROM
        order_info
        WHERE order_info.STATUS = 5  and  order_info.pay_type = 2 and order_info.is_deleted=0 and	order_info.update_time
				BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR} and order_info.shop_id>0
			   AND  NOT EXISTS(select *from shop_account_log where  shop_account_log.order_id=order_info.id)
  </insert>
  <!--平台用户微信退款记录-->
  <insert id="wxUserRefundByTime" parameterType="java.lang.String">
      insert into shop_account_log (order_id,pay_type,cash_amount,cash_time,refund_amount,refund_time,create_time,user_type)
      SELECT
        order_info.id,2,null,null,order_info.real_amount,order_info.update_time,now(),1
        FROM
        order_info
        WHERE order_info.STATUS = 5  and  order_info.pay_type = 2 and order_info.is_deleted=0 and	order_info.update_time
				BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR}  and order_info.shop_id=0
			   AND  NOT EXISTS(select *from shop_account_log where  shop_account_log.order_id=order_info.id)
  </insert>
  <!--商户余额支付记录-->
  <insert id="yuePayByTime" parameterType="java.lang.String">
      insert into shop_account_log (order_id,pay_type,cash_amount,cash_time,refund_amount,refund_time,create_time,user_type)
      SELECT
        order_write_off.order_id,3,order_write_off.real_shop_unit_price,order_write_off.create_time,NULL,NULL,now(),2
        FROM
        order_info
        INNER JOIN order_write_off ON order_write_off.order_id = order_info.id AND (order_info.STATUS = 3  and  order_info.pay_type = 4 and order_info.is_deleted=0)
        WHERE	order_write_off.create_time
				BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR} and order_write_off.shop_id > 0
               AND  NOT EXISTS(select *from shop_account_log where  shop_account_log.order_id=order_info.id)
  </insert>

  <!--平台用户余额支付记录-->
  <insert id="yueUserPayByTime" parameterType="java.lang.String">
      insert into shop_account_log (order_id,pay_type,cash_amount,cash_time,refund_amount,refund_time,create_time,user_type)
      SELECT
        order_write_off.order_id,3,order_write_off.real_shop_unit_price,order_write_off.create_time,NULL,NULL,now(),1
        FROM
        order_info
        INNER JOIN order_write_off ON order_write_off.order_id = order_info.id AND (order_info.STATUS = 3  and  order_info.pay_type = 4 and order_info.is_deleted=0)
        WHERE	order_write_off.create_time
				BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR} and order_write_off.shop_id = 0
               AND  NOT EXISTS(select *from shop_account_log where  shop_account_log.order_id=order_info.id)
  </insert>

  <!--商户余额退款明细-->
  <insert id="yueRefundByTime" parameterType="java.lang.String">
      insert into shop_account_log (order_id,pay_type,cash_amount,cash_time,refund_amount,refund_time,create_time,user_type)
       SELECT
        order_info.id,4,null,null,order_info.real_amount,order_info.update_time,now(),2
        FROM
        order_info
        WHERE order_info.STATUS = 5  and  order_info.pay_type = 4 and order_info.is_deleted=0 and	order_info.update_time
				BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR} and order_info.shop_id >0
				AND  NOT EXISTS(select *from shop_account_log where  shop_account_log.order_id=order_info.id)
  </insert>

  <!--平台用户余额退款明细-->
  <insert id="yueUserRefundByTime" parameterType="java.lang.String">
      insert into shop_account_log (order_id,pay_type,cash_amount,cash_time,refund_amount,refund_time,create_time,user_type)
       SELECT
        order_info.id,4,null,null,order_info.real_amount,order_info.update_time,now(),1
        FROM
        order_info
        WHERE order_info.STATUS = 5  and  order_info.pay_type = 4 and order_info.is_deleted=0 and	order_info.update_time
				BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR} and order_info.shop_id =0
				AND  NOT EXISTS(select *from shop_account_log where  shop_account_log.order_id=order_info.id)
  </insert>

</mapper>